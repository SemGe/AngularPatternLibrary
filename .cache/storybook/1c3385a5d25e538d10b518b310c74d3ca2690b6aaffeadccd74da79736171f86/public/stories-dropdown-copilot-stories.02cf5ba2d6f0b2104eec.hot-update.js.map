{"version":3,"file":"stories-dropdown-copilot-stories.02cf5ba2d6f0b2104eec.hot-update.js","mappings":";;;;;;;;;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACxEA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://my-angular-project/./src/app/dropdown-copilot/dropdown-copilot.component.ts","webpack://my-angular-project/./src/stories/dropdown-copilot.stories.ts"],"sourcesContent":["\"use strict\";\nvar __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for (var i = decorators.length - 1; i >= 0; i--) {\n        var context = {};\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        }\n        else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n};\nvar __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for (var i = 0; i < initializers.length; i++) {\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropdownCopilotComponent = void 0;\nconst core_1 = require(\"@angular/core\");\nlet DropdownCopilotComponent = (() => {\n    let _classDecorators = [(0, core_1.Component)({\n            selector: 'app-dropdown-copilot',\n            template: require(\"./dropdown-copilot.component.html?ngResource\"),\n            styles: [require(\"./dropdown-copilot.component.css?ngResource\")]\n        })];\n    let _classDescriptor;\n    let _classExtraInitializers = [];\n    let _classThis;\n    var DropdownCopilotComponent = class {\n        static { _classThis = this; }\n        constructor() {\n            this.isDropdownOpen = false;\n            this.options = [];\n        }\n        static {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: \"class\", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);\n            DropdownCopilotComponent = _classThis = _classDescriptor.value;\n            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        }\n        toggleDropdown() {\n            this.isDropdownOpen = !this.isDropdownOpen;\n        }\n        static { this.propDecorators = {\n            isDropdownOpen: [{ type: core_1.Input }],\n            options: [{ type: core_1.Input }]\n        }; }\n        static {\n            __runInitializers(_classThis, _classExtraInitializers);\n        }\n    };\n    return DropdownCopilotComponent = _classThis;\n})();\nexports.DropdownCopilotComponent = DropdownCopilotComponent;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OpenInDocs = exports.Default = void 0;\n// dropdown-copilot.stories.ts\nconst angular_1 = require(\"@storybook/angular\");\nconst dropdown_copilot_component_1 = require(\"../app/dropdown-copilot/dropdown-copilot.component\");\nexports.default = {\n    title: 'DropdownCopilot',\n    component: dropdown_copilot_component_1.DropdownCopilotComponent,\n    decorators: [\n        (0, angular_1.moduleMetadata)({\n            declarations: [dropdown_copilot_component_1.DropdownCopilotComponent],\n        }),\n    ],\n};\nconst Default = () => ({\n    component: dropdown_copilot_component_1.DropdownCopilotComponent,\n    props: {\n        options: ['Option A', 'Option B', 'Option C'], // Optionen für das Dropdown\n    },\n});\nexports.Default = Default;\n// Füge diese neue Story hinzu\nconst OpenInDocs = () => ({\n    component: dropdown_copilot_component_1.DropdownCopilotComponent,\n    props: {\n        isDropdownOpen: true, // Setze den Dropdown-Zustand auf geöffnet\n        options: ['Option A', 'Option B', 'Option C'], // Optionen für das Dropdown\n    },\n});\nexports.OpenInDocs = OpenInDocs;\nexports.OpenInDocs.parameters = {\n    docs: {\n        source: {\n            code: `<app-dropdown-copilot [isDropdownOpen]=\"true\" [options]=\"['Option A', 'Option B', 'Option C']\"></app-dropdown-copilot>`,\n        },\n    },\n};\n"],"names":[],"sourceRoot":""}